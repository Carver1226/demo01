// Code generated by MockGen. DO NOT EDIT.
// Source: iDao.go

// Package mock is a generated GoMock package.
package dao

import (
	model "demo01/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDao is a mock of IDao interface.
type MockIDao struct {
	ctrl     *gomock.Controller
	recorder *MockIDaoMockRecorder
}

// MockIDaoMockRecorder is the mock recorder for MockIDao.
type MockIDaoMockRecorder struct {
	mock *MockIDao
}

// NewMockIDao creates a new mock instance.
func NewMockIDao(ctrl *gomock.Controller) *MockIDao {
	mock := &MockIDao{ctrl: ctrl}
	mock.recorder = &MockIDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDao) EXPECT() *MockIDaoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIDao) CreateOrder(order *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIDaoMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIDao)(nil).CreateOrder), order)
}

// DeleteOrderByOrderNo mocks base method.
func (m *MockIDao) DeleteOrderByOrderNo(order *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByOrderNo", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByOrderNo indicates an expected call of DeleteOrderByOrderNo.
func (mr *MockIDaoMockRecorder) DeleteOrderByOrderNo(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByOrderNo", reflect.TypeOf((*MockIDao)(nil).DeleteOrderByOrderNo), order)
}

// GetAllOrder mocks base method.
func (m *MockIDao) GetAllOrder() ([]*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrder")
	ret0, _ := ret[0].([]*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrder indicates an expected call of GetAllOrder.
func (mr *MockIDaoMockRecorder) GetAllOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrder", reflect.TypeOf((*MockIDao)(nil).GetAllOrder))
}

// GetOrderByOrderNo mocks base method.
func (m *MockIDao) GetOrderByOrderNo(orderNo string) (*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByOrderNo", orderNo)
	ret0, _ := ret[0].(*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByOrderNo indicates an expected call of GetOrderByOrderNo.
func (mr *MockIDaoMockRecorder) GetOrderByOrderNo(orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByOrderNo", reflect.TypeOf((*MockIDao)(nil).GetOrderByOrderNo), orderNo)
}

// UpdateOrder mocks base method.
func (m *MockIDao) UpdateOrder(order *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIDaoMockRecorder) UpdateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIDao)(nil).UpdateOrder), order)
}

// UpdatesOrder mocks base method.
func (m *MockIDao) UpdatesOrder(order, updateOrder *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatesOrder", order, updateOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatesOrder indicates an expected call of UpdatesOrder.
func (mr *MockIDaoMockRecorder) UpdatesOrder(order, updateOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatesOrder", reflect.TypeOf((*MockIDao)(nil).UpdatesOrder), order, updateOrder)
}
